version: "3"

services:
  # Serviço que irá rodar o node
  backend:
    platform: linux/x86_64
    # Nome do container para facilitar execução
    container_name: movie_challenge
    # Caminho da Dockerfile
    build: ./
    # Diretório padrão de execução
    working_dir: /app
    # Lista de volumes (diretórios) mapeados de fora para dentro do container
    volumes:
      # Monta o diretório atual, com todos os dados do projeto, 
      # dentro do diretório /app
      - ./:/app
    # Lista de serviços do qual este serviço depende
    depends_on:
      # Precisa do mongo funcionando antes de subir o node
      - db
      - redis
    # Lista de portas mapeadas de dentro para fora do container
    # na notação porta_de_fora:porta_de_dentro
    environment:
      - PORT=3001
      - JWT_SECRET=jwt_secret
      # Os dados abaixo se referem ao container `db`
      # Dica: Relembre aqui da comunicação interna entre containers
      - PGUSER=root
      - PGPASSWORD=password
      - PGHOST=db
      - PGPORT=5432
      - PGDATABASE=db
      - REDIS_PASSWORD=redispassword
    ports:
      # Expõe a porta padrão da aplicação: altere aqui caso use outra porta
      - 3001:3001
    networks:
      - movie_challenge_net

  # Serviço que irá rodar o postgres
  db:
    image: postgres
    container_name: movie_challenge_db
    environment:
      POSTGRES_DB: db
      POSTGRES_PASSWORD: password
      POSTGRES_USER: root
    volumes:
      - ./:/app
    restart: always
    ports:
      - 5432:5432
    networks:
      - movie_challenge_net
  redis:
    image: redis
    expose: 
      - 6379
    environment:
      REDIS_PASSWORD: redispassword
    networks:
      - movie_challenge_net
   

# Lista de redes que os containeres irão utilizar
networks:
  movie_challenge_net:
    driver: bridge

# As chaves `tty`, `stdin_open` e `command` fazem com que o container fique
# rodando em segundo plano, bem como tornam possível o uso do comando
# `docker attach`, já deixando o terminal atual acoplado ao container, direto
# no bash. Apesar disso, utilizar o attach mais de uma vez irá replicar o
# terminal, portanto é melhor utilizar o comando `docker exec`.

# A renomeação da rede padrão é feita pois caso contrário o nome da rede será
# o nome do diretório onde o arquivo atual se encontra, o que pode dificultar
# a listagem individual.
